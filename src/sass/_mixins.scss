@mixin backgroundImage($url, $size: cover, $repeat: no-repeat, $position: center) {
    background: $url;
    background-size: $size;
    background-repeat: $repeat;
    background-position: $position;
}

@mixin fade-in($duration: 1s) {
    animation-name: fade-in;
    animation-duration: $duration;
    animation-timing-function: ease-in;

    @keyframes fade-in {
        0% { opacity: 0;}
        100% { opacity: 1;}
    }
}

@mixin fade-out($duration: 1s) {
    animation-name: fade-out;
    animation-duration: $duration;
    animation-timing-function: ease-in;

    @keyframes fade-out {
        0% { opacity: 1; }
        100% { opacity: 0; }
    }
}

@mixin rotate($degrees) {
    transform: rotate($degrees);

    animation-name: rotate;
    @keyframes rotate {
        0% { transform: rotate(0deg)}
        100% { transform: rotate($degrees)}
    }
}

@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}
  
@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;
            @media screen and (min-width: $min-vw) {
                font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }
            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}

@mixin flex($flex-direction: row, $justify-content: center, $align-items: center) {
    /* When calling the function use for example $justify-content: null to not use this property, otherwise it will use the default */

    display: -webkit-box;
    display: -moz-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;


    @if $flex-direction == row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
        -moz-box-direction: reverse;
        -moz-box-orient: horizontal;
    } @else if $flex-direction == column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
        -moz-box-direction: normal;
        -moz-box-orient: vertical;
    } @else if $flex-direction == column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
        -moz-box-direction: reverse;
        -moz-box-orient: vertical;
    } @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
        -moz-box-direction: normal;
        -moz-box-orient: horizontal;
    }
    -webkit-flex-direction: $flex-direction;
    -ms-flex-direction: $flex-direction;
    flex-direction: $flex-direction;


    @if $justify-content == flex-start {
        -webkit-box-pack: start;
        -moz-box-pack: start;
        -ms-flex-pack: start;
    } @else if $justify-content == flex-end {
        -webkit-box-pack: end;
        -moz-box-pack: end;
        -ms-flex-pack: end;
    } @else if $justify-content == space-between {
        -webkit-box-pack: justify;
        -moz-box-pack: justify;
        -ms-flex-pack: justify;
    } @else if $justify-content == space-around {
        -ms-flex-pack: distribute;    
    } @else {
        -webkit-box-pack: $justify-content;
        -moz-box-pack: $justify-content;
        -ms-flex-pack: $justify-content;
    }
    -webkit-justify-content: $justify-content;
    justify-content: $justify-content;

    // Required for Edge which has a bug in that it supports '@Support space-evenly', but does nothing with it
    @supports (-ms-flow-from: thingy) {
        @if $justify-content == space-evenly {
            justify-content: space-between;
        }
    }


    @if $align-items == flex-start {
        -webkit-box-align: start;
        -moz-box-align: start;
        -ms-flex-align: start;
    } @else if $align-items == flex-end {
        -webkit-box-align: end;
        -moz-box-align: end;
        -ms-flex-align: end;
    } @else {
        -webkit-box-align: $align-items;
        -moz-box-align: $align-items;
        -ms-flex-align: $align-items;
    }
    -webkit-align-items: $align-items;
    align-items: $align-items;
}

@mixin flex-wrap($value: nowrap) {
    /* No Webkit/FF Box fallback. */
    -webkit-flex-wrap: $value;
    @if $value == nowrap {
        -ms-flex-wrap: none;
    } @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    flex-basis: $value;
}

@mixin flex-flex($fg: 1, $fs: 0, $fb: auto) {
    // This is the flex property of display: flex (I called the main mixin flex, and as used in multiple places, have kept it named as such)

    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;
  
    // Box-Flex only supports a flex-grow value so lets grab the
    // first item in the list and just return that.
    @if type-of($fg) == 'list' {
      $fg-boxflex: nth($fg, 1);
    }
  
    -webkit-box: $fg-boxflex;
    -moz-box: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}