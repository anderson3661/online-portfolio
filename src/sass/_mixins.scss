@mixin backgroundImage($url, $size: cover, $repeat: no-repeat, $position: center) {
    background: $url;
    background-size: $size;
    background-repeat: $repeat;
    background-position: $position;
}

@mixin flex($flex-direction: row, $justify-content: center, $align-items: center) {
    // When calling the function use for example $justify-content: null to not use this property, otherwise it will use the default
    display: flex;
    flex-direction: $flex-direction;
    justify-content: $justify-content;
    align-items: $align-items;
}


@mixin fade-in($duration: 1s) {
    animation-name: fade-in;
    animation-duration: $duration;
    animation-timing-function: ease-in;

    @keyframes fade-in {
        0% { opacity: 0;}
        100% { opacity: 1;}
    }
}

@mixin fade-out($duration: 1s) {
    animation-name: fade-out;
    animation-duration: $duration;
    animation-timing-function: ease-in;

    @keyframes fade-out {
        0% { opacity: 1; }
        100% { opacity: 0; }
    }
}

@mixin rotate($degrees) {
    transform: rotate($degrees);

    animation-name: rotate;
    @keyframes rotate {
        0% { transform: rotate(0deg)}
        100% { transform: rotate($degrees)}
    }
}

@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}
  
@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;
            @media screen and (min-width: $min-vw) {
                font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }
            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}